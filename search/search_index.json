{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 This is the documentation made by Fabian Portillo Gonzalez (@fabianpg95 github username) on the proposed SQA challenge in order to gain experience in the technical and soft skills along the process of this challenge. This site was made using Mkdocs as static site and markdown as a written language with the purpose of having the different sections documented in a more understandable and isolated way such as the definition of objectives of the challenge, the Back End , Front End , and Performance sections besides a technical diagram showing the different components as part of the application. Goals SQA Challenge \u00b6 Implement Page Object Model with one of the Javascript based frameworks listed for Frontend Automation. Document everything, add readme describing the steps and how to's on each section. Use best practices for element selectors. Use Eslint for static analysis and assure code standards. Configure SonarQube . Implement Backend Automation. Configure any of the described CI tools mentioned below to build on demand. Set up Slack notifications once a new build is done. Implement BrowserStack for cross platform/browser testing.(Ask your buddy for BS credentials or contact eduardo.contreras) Create a Slides presentation describing your project, integration of tools, adventages, disadvantages, structure and also include a diagram flow.","title":"Index"},{"location":"#introduction","text":"This is the documentation made by Fabian Portillo Gonzalez (@fabianpg95 github username) on the proposed SQA challenge in order to gain experience in the technical and soft skills along the process of this challenge. This site was made using Mkdocs as static site and markdown as a written language with the purpose of having the different sections documented in a more understandable and isolated way such as the definition of objectives of the challenge, the Back End , Front End , and Performance sections besides a technical diagram showing the different components as part of the application.","title":"Introduction"},{"location":"#goals-sqa-challenge","text":"Implement Page Object Model with one of the Javascript based frameworks listed for Frontend Automation. Document everything, add readme describing the steps and how to's on each section. Use best practices for element selectors. Use Eslint for static analysis and assure code standards. Configure SonarQube . Implement Backend Automation. Configure any of the described CI tools mentioned below to build on demand. Set up Slack notifications once a new build is done. Implement BrowserStack for cross platform/browser testing.(Ask your buddy for BS credentials or contact eduardo.contreras) Create a Slides presentation describing your project, integration of tools, adventages, disadvantages, structure and also include a diagram flow.","title":"Goals SQA Challenge"},{"location":"Back-End/back-improv/","text":"Docker \u00b6 Instead of having the configuration just installed in computer, could be used Docker for pull some Jenkins image from Docker hub, having the service running in a container and also having a Dockerfile and volumes for data persistence. Also Docker could be useful for isolate the work, integrate with other tools and for fast/easy configuration just to mention some advantages. Jenkins & Jenkinsfile: \u00b6 For next time can be nice taking more time to add more clean commands and scripts in Jenkinsfile Also include better practices with Jenkins like save some information in environment variables and just call them. API documentation. \u00b6 Postman API documentation is cool but maybe in future can be considered Swagger. Postman: \u00b6 BDD: Organize the tests using BDD('Describe') BDD Hooks: Use before, after, beforeEach, and afterEach hooks to reuse code and tests Automatic Error Handling: If a script error occurs, only that one test fails. Other tests still run. Nested describe blocks: You can nest describe blocks to logically group your tests Mock servers: Mock some difficult response like xx500 responses or other scenarios. Monitor Monitor the collection to schedule some days and times to run automatically and receive the response in your email. Improve the tests: In some tests could be improved the way that variables are defined and then used. randomData can also be defined to use in POST requests.","title":"TODO: Improvements"},{"location":"Back-End/back-improv/#docker","text":"Instead of having the configuration just installed in computer, could be used Docker for pull some Jenkins image from Docker hub, having the service running in a container and also having a Dockerfile and volumes for data persistence. Also Docker could be useful for isolate the work, integrate with other tools and for fast/easy configuration just to mention some advantages.","title":"Docker"},{"location":"Back-End/back-improv/#jenkins-jenkinsfile","text":"For next time can be nice taking more time to add more clean commands and scripts in Jenkinsfile Also include better practices with Jenkins like save some information in environment variables and just call them.","title":"Jenkins &amp; Jenkinsfile:"},{"location":"Back-End/back-improv/#api-documentation","text":"Postman API documentation is cool but maybe in future can be considered Swagger.","title":"API documentation."},{"location":"Back-End/back-improv/#postman","text":"BDD: Organize the tests using BDD('Describe') BDD Hooks: Use before, after, beforeEach, and afterEach hooks to reuse code and tests Automatic Error Handling: If a script error occurs, only that one test fails. Other tests still run. Nested describe blocks: You can nest describe blocks to logically group your tests Mock servers: Mock some difficult response like xx500 responses or other scenarios. Monitor Monitor the collection to schedule some days and times to run automatically and receive the response in your email. Improve the tests: In some tests could be improved the way that variables are defined and then used. randomData can also be defined to use in POST requests.","title":"Postman:"},{"location":"Back-End/back-process/","text":"Introduction \u00b6 In this section is described the steps followed to complete the backend section of the SQA Onboarding challenge. Prerequisites (optional) \u00b6 Study or review about REST, API testing and Postman. Understand how positive and negative tests work and how should be their expected results. Steps \u00b6 Postman \u00b6 Navigate to Todoist API website: Read the documentation to better understand the 'Todoist' REST API, HTTP requests methods, and expected responses for each case. Download Postman Define a new collection and a new environment for your variables. Create 2 folders: Projects and Tasks and define the folder/test structure you prefer (this can change later in case you find a better structure) . Create your endpoints. Think about your positive and negative scenarios you will test. Define your variables and the test scripts for your endpoints. Test your endpoints. If everything goes well then run your collection using Postman until all tests passed. Newman \u00b6 Export your collections and environment variables and save them in a folder of your computer. Install newman and htmlextra in your computer. Open your terminal inside the folder you created and run your collection using newman and htmlextra to verify everything is working and the HTML reports with the results were created. Jenkins \u00b6 Install Jenkins in your computer Open your localhost in web browser and complete the steps for admin password, plugins and required. Install plugins Manage Jenkins > Manage Plugins: (HTML reporter, NodeJS, Blue Ocean, SonarScanner, Jenkinslint, Slack Notification) Add NodeJs: Global Tools configuration > NodeJs > choose newman for npm. Create a new item (job). Select 'pipeline' if you want to define a Jenkinsfile with different stages or environments, but if not then select 'freestyle project'. Click on Configure: In Source Code Management select git option and integrate your github repo, your branch and save your credentials. In Build environments check the option of 'Provide Node & npm bin/ folder to PATH' In Build add an 'Add build step' and create your command to install dependencies, HTML reports and run your collection and env variables from your github repo. In Post-build Actions fill the fields. Exit 'configure' and click on build now to see if the job run fine and the HTML report with the results was generated. In the case of Jenkinsfile, you define all the stages, sh commands and installation there. Note you can install and use Jenkins in your localhost or use a Docker image of Jenkins. Both are correct.","title":"2.- Process"},{"location":"Back-End/back-process/#introduction","text":"In this section is described the steps followed to complete the backend section of the SQA Onboarding challenge.","title":"Introduction"},{"location":"Back-End/back-process/#prerequisites-optional","text":"Study or review about REST, API testing and Postman. Understand how positive and negative tests work and how should be their expected results.","title":"Prerequisites (optional)"},{"location":"Back-End/back-process/#steps","text":"","title":"Steps"},{"location":"Back-End/back-process/#postman","text":"Navigate to Todoist API website: Read the documentation to better understand the 'Todoist' REST API, HTTP requests methods, and expected responses for each case. Download Postman Define a new collection and a new environment for your variables. Create 2 folders: Projects and Tasks and define the folder/test structure you prefer (this can change later in case you find a better structure) . Create your endpoints. Think about your positive and negative scenarios you will test. Define your variables and the test scripts for your endpoints. Test your endpoints. If everything goes well then run your collection using Postman until all tests passed.","title":"Postman"},{"location":"Back-End/back-process/#newman","text":"Export your collections and environment variables and save them in a folder of your computer. Install newman and htmlextra in your computer. Open your terminal inside the folder you created and run your collection using newman and htmlextra to verify everything is working and the HTML reports with the results were created.","title":"Newman"},{"location":"Back-End/back-process/#jenkins","text":"Install Jenkins in your computer Open your localhost in web browser and complete the steps for admin password, plugins and required. Install plugins Manage Jenkins > Manage Plugins: (HTML reporter, NodeJS, Blue Ocean, SonarScanner, Jenkinslint, Slack Notification) Add NodeJs: Global Tools configuration > NodeJs > choose newman for npm. Create a new item (job). Select 'pipeline' if you want to define a Jenkinsfile with different stages or environments, but if not then select 'freestyle project'. Click on Configure: In Source Code Management select git option and integrate your github repo, your branch and save your credentials. In Build environments check the option of 'Provide Node & npm bin/ folder to PATH' In Build add an 'Add build step' and create your command to install dependencies, HTML reports and run your collection and env variables from your github repo. In Post-build Actions fill the fields. Exit 'configure' and click on build now to see if the job run fine and the HTML report with the results was generated. In the case of Jenkinsfile, you define all the stages, sh commands and installation there. Note you can install and use Jenkins in your localhost or use a Docker image of Jenkins. Both are correct.","title":"Jenkins"},{"location":"Back-End/back-reqs/","text":"Backend project \u00b6 Navigate to Todoist API Download Postman Define a new collection and a new environment for your variables Backend Automation Tasks: \u00b6 Get your authorization token and save it as an environment variable Create a new folder inside your collection for projects and another one for tasks. Create the following endpoints and its corresponding Tests: status codes, content, json schema,response time, etc. a) Projects Get all projects Create a new project Get a project Update a project Delete a project b) Tasks: Get active tasks Create a new task Get an active task Update a task Close a task Reopen a task Delete a task Create Negative scenarios for each endpoint Info Integrate one framework for API Test Automation i.e. Newman Axios SuperTest chai-http So you can run your tests from the command line","title":"Requirements"},{"location":"Back-End/back-reqs/#backend-project","text":"Navigate to Todoist API Download Postman Define a new collection and a new environment for your variables","title":"Backend project"},{"location":"Back-End/back-reqs/#backend-automation-tasks","text":"Get your authorization token and save it as an environment variable Create a new folder inside your collection for projects and another one for tasks. Create the following endpoints and its corresponding Tests: status codes, content, json schema,response time, etc. a) Projects Get all projects Create a new project Get a project Update a project Delete a project b) Tasks: Get active tasks Create a new task Get an active task Update a task Close a task Reopen a task Delete a task Create Negative scenarios for each endpoint Info Integrate one framework for API Test Automation i.e. Newman Axios SuperTest chai-http So you can run your tests from the command line","title":"Backend Automation Tasks:"},{"location":"Back-End/back-results/","text":"Results \u00b6 Here are listed the images of some results achieved for the sections about the backend of SQA Onboarding challenge. Images \u00b6 Postman project structure: \u00b6 API documentation todoist \u00b6 todoist API doc \u00b6 Newman and HTML reports \u00b6","title":"3.- Results"},{"location":"Back-End/back-results/#results","text":"Here are listed the images of some results achieved for the sections about the backend of SQA Onboarding challenge.","title":"Results"},{"location":"Back-End/back-results/#images","text":"","title":"Images"},{"location":"Back-End/back-results/#postman-project-structure","text":"","title":"Postman project structure:"},{"location":"Back-End/back-results/#api-documentation-todoist","text":"","title":"API documentation todoist"},{"location":"Back-End/back-results/#todoist-api-doc","text":"","title":"todoist API doc"},{"location":"Back-End/back-results/#newman-and-html-reports","text":"","title":"Newman and HTML reports"},{"location":"Back-End/back-tech-stack/","text":"","title":"1.- Teck Stack"},{"location":"Business-Present/demo/","text":"Video \u00b6","title":"Demo - video"},{"location":"Business-Present/demo/#video","text":"","title":"Video"},{"location":"Business-Present/diagram/","text":"","title":"Diagram"},{"location":"Business-Present/qa-process/","text":"","title":"QA process"},{"location":"Business-Present/test-plan-strat/","text":"Scope, objectives, approach and risks Test Basis (use cases, diagrams, GTR, source code, data model, business processes) Scheduling of internal test activities (analysis, design, implementation, execution) Entry Criteria and Exit Criteria Entry Criteria: Availability of: testable requirements, user stories, and/or models (e.g., when following a model based testing strategy) test items that have met the exit criteria for any prior test levels test environment necessary test tools test data and other necessary resources Exit Criteria: Planned tests have been executed A defined level of coverage (e.g., of requirements, user stories, acceptance criteria, risks, code) has been achieved The number of unresolved defects is within an agreed limit The number of estimated remaining defects is sufficiently low The evaluated levels of reliability, performance efficiency, usability, security, and other relevant quality characteristics are sufficient Test Strategy: Manual vs Automated. Candidates to be automated: repetitive tasks types of regression tests: sanity smoke confirmation regression tests that use same workflow but different data Tests that are prone to human error Test Design Techniques: White Box: Static code analysis Predefined patterns Machine learning analysis Unit tests Linting tools: External tools: SonarQube: Code smells Technical debt Vulnerabilities Size (files, classes, methods\u2026) Comments Complexity: Cyclomatic complexity Cognitive complexity Black Box: Categories: Functional Non functional Regression Types of techniques: Equivalence Partitioning Boundary Value Analysis Decision Table Testing Error guessing","title":"Test Plan & Strategy"},{"location":"Business-Present/test-types/","text":"Smoke Sanity Regression","title":"Testing types"},{"location":"Business-Present/tools-desc/","text":"Development and SCM tools \u00b6 Tool Description Cost Advantages Why were selected Git Version Control System (VCS) Free Reliability. - Security. - Performance. Is the best and only option when you work also with github. Github Git repository hosting service Free Track changes in versions. Integration options Is the most popular and the company use this platform Visual Studio Code Text editor for development Free Light. - Extensions. - Easy to use It has great integration with all the tech stack of the project and I like. Backend \u00b6 Postman : \u00b6 is an application used for API testing. It is an HTTP client that tests HTTP requests, utilizing a graphical user interface, through which we obtain different types of responses that need to be subsequently validated. Is used for developers and testers to design, build, test and iterate their APIs. Cost : Free Advantages: Free. Integration with many tools. Easy to use. Good support and documentation. Execution through UI or CLI. Why was selected? It fits perfectly for the tasks regarding backend testing in SQA challenge, I had experience using Postman and is the most popular int the world. Integrated tools Postman has te ability to work fine with Javascript for test automation, Newman for running the collection in CLI and also generate the reports and finally Postman allows you to generate an API documented for your collection. Frontend \u00b6 Tool Description Cost Advantages Why were selected Cypress Test Automation framework for functional testing Free Great documentation - Easy to use - Promote the best practices Is a well known framework and it fits with the tech stack Javascript Programming language (Web) Free Native language for web development and browsers. - Compatible with Cypress Is the progamming language allowed to use Cypress Browserstack Text editor for development Free test the compatibility of the backward/older version of the browsers and platforms Temporal free access to use it in SQA challenge. Performance \u00b6 Artillery : \u00b6 Artillery is an open-source command-line tool purpose-built for load testing and smoke testing web applications. Is a modern, powerful, and easy-to-use load performance testing tool that can be smoothly implemented with Jenkins via plugins. Cost : Free Advantages: Planet-scale performance testing Millions of requests per second Multiple geographical regions Load testing Smoke testing Why was selected? It has a plugin to integrate with Jenkins (Jenkinsfile) . Useful for Load testing and not so hard to use. CICD pipeline \u00b6 Tool Description Cost Advantages Why were selected Jenkins Version Control System (VCS) Free .Great integration with almost all tools. - Easy to use. - Easy to configure. - Jenkinsfile. - Plugins . - Newman It give us a Jenkinsfile to set a pipeline which is a perfect match for the project. Sonarqube Git repository hosting service Free A lot of metrics. - Great documentation. - Easy integration with Jenkins or CI tools. - Reports generated The metrics and reports generated are great and also the security. ESLint Text editor for development Free Easy to configure. - Eslint ignore file. - Rules.- Standards Requirement from the SQA challenge and good to analyse code. Slack notification Text editor for development Free Integration with Jenkins. - Customizable. - Easy to use It was a requirement in the project and useful to notify when build has finished.","title":"Tools description"},{"location":"Business-Present/tools-desc/#development-and-scm-tools","text":"Tool Description Cost Advantages Why were selected Git Version Control System (VCS) Free Reliability. - Security. - Performance. Is the best and only option when you work also with github. Github Git repository hosting service Free Track changes in versions. Integration options Is the most popular and the company use this platform Visual Studio Code Text editor for development Free Light. - Extensions. - Easy to use It has great integration with all the tech stack of the project and I like.","title":"Development and SCM tools"},{"location":"Business-Present/tools-desc/#backend","text":"","title":"Backend"},{"location":"Business-Present/tools-desc/#postman","text":"is an application used for API testing. It is an HTTP client that tests HTTP requests, utilizing a graphical user interface, through which we obtain different types of responses that need to be subsequently validated. Is used for developers and testers to design, build, test and iterate their APIs. Cost : Free Advantages: Free. Integration with many tools. Easy to use. Good support and documentation. Execution through UI or CLI. Why was selected? It fits perfectly for the tasks regarding backend testing in SQA challenge, I had experience using Postman and is the most popular int the world. Integrated tools Postman has te ability to work fine with Javascript for test automation, Newman for running the collection in CLI and also generate the reports and finally Postman allows you to generate an API documented for your collection.","title":"Postman:"},{"location":"Business-Present/tools-desc/#frontend","text":"Tool Description Cost Advantages Why were selected Cypress Test Automation framework for functional testing Free Great documentation - Easy to use - Promote the best practices Is a well known framework and it fits with the tech stack Javascript Programming language (Web) Free Native language for web development and browsers. - Compatible with Cypress Is the progamming language allowed to use Cypress Browserstack Text editor for development Free test the compatibility of the backward/older version of the browsers and platforms Temporal free access to use it in SQA challenge.","title":"Frontend"},{"location":"Business-Present/tools-desc/#performance","text":"","title":"Performance"},{"location":"Business-Present/tools-desc/#artillery","text":"Artillery is an open-source command-line tool purpose-built for load testing and smoke testing web applications. Is a modern, powerful, and easy-to-use load performance testing tool that can be smoothly implemented with Jenkins via plugins. Cost : Free Advantages: Planet-scale performance testing Millions of requests per second Multiple geographical regions Load testing Smoke testing Why was selected? It has a plugin to integrate with Jenkins (Jenkinsfile) . Useful for Load testing and not so hard to use.","title":"Artillery:"},{"location":"Business-Present/tools-desc/#cicd-pipeline","text":"Tool Description Cost Advantages Why were selected Jenkins Version Control System (VCS) Free .Great integration with almost all tools. - Easy to use. - Easy to configure. - Jenkinsfile. - Plugins . - Newman It give us a Jenkinsfile to set a pipeline which is a perfect match for the project. Sonarqube Git repository hosting service Free A lot of metrics. - Great documentation. - Easy integration with Jenkins or CI tools. - Reports generated The metrics and reports generated are great and also the security. ESLint Text editor for development Free Easy to configure. - Eslint ignore file. - Rules.- Standards Requirement from the SQA challenge and good to analyse code. Slack notification Text editor for development Free Integration with Jenkins. - Customizable. - Easy to use It was a requirement in the project and useful to notify when build has finished.","title":"CICD pipeline"},{"location":"Contribute-Doc/contribute-doc/","text":"Contribute with documentation: \u00b6 In the following link you will see all changes done for documentation of this sqa-challenge-fabianportilloglez : Github repository \u00b6 Prerequisites: \u00b6 Test the site locally: \u00b6 Remember that MkDocs comes included with a server. In order to run the site locally, inside your project use: mkdocs serve Then Open up http://127.0.0.1:8000/ in your browser, and you will see the default Home Page to see all the time how looks everything before push your changes. Work with branches: \u00b6 Important Please always do git pull before working on your code and before committing any changes in order to avoid conflicts in our versions. Steps \u00b6 1.- Build the site \u00b6 mkdocs build 2.- Commit the changes \u00b6 Once you did changes commit them using: git commit -m \"Write your commit message\" 3.- Push your changes \u00b6 git push origin main 4.- Deploy the changes to Github Pages \u00b6 mkdocs gh-deploy Done! \u00b6","title":"Contribute"},{"location":"Contribute-Doc/contribute-doc/#contribute-with-documentation","text":"In the following link you will see all changes done for documentation of this sqa-challenge-fabianportilloglez :","title":"Contribute with documentation:"},{"location":"Contribute-Doc/contribute-doc/#github-repository","text":"","title":"Github repository"},{"location":"Contribute-Doc/contribute-doc/#prerequisites","text":"","title":"Prerequisites:"},{"location":"Contribute-Doc/contribute-doc/#test-the-site-locally","text":"Remember that MkDocs comes included with a server. In order to run the site locally, inside your project use: mkdocs serve Then Open up http://127.0.0.1:8000/ in your browser, and you will see the default Home Page to see all the time how looks everything before push your changes.","title":"Test the site locally:"},{"location":"Contribute-Doc/contribute-doc/#work-with-branches","text":"Important Please always do git pull before working on your code and before committing any changes in order to avoid conflicts in our versions.","title":"Work with branches:"},{"location":"Contribute-Doc/contribute-doc/#steps","text":"","title":"Steps"},{"location":"Contribute-Doc/contribute-doc/#1-build-the-site","text":"mkdocs build","title":"1.- Build the site"},{"location":"Contribute-Doc/contribute-doc/#2-commit-the-changes","text":"Once you did changes commit them using: git commit -m \"Write your commit message\"","title":"2.- Commit the changes"},{"location":"Contribute-Doc/contribute-doc/#3-push-your-changes","text":"git push origin main","title":"3.- Push your changes"},{"location":"Contribute-Doc/contribute-doc/#4-deploy-the-changes-to-github-pages","text":"mkdocs gh-deploy","title":"4.- Deploy the changes to Github Pages"},{"location":"Contribute-Doc/contribute-doc/#done","text":"","title":"Done!"},{"location":"Contribute-Doc/install-mkdocs/","text":"Overview: \u00b6 MkDocs is a fast, simple and static site generator for building project documentation. Documentation source files are written in Markdown , and configured with a single YAML configuration file to add the structure and navigation menus. Example: mkdocs.yml file: # Paths and navigation. nav: - Home: index.md - Introduction: - 'Introduction': 'Introduction/intro-doc.md' - Documentation: - 'Docs': 'Documentation/doc-steps.md' ... Installation \u00b6 Important If you face any issue along this installation process then you can go here: Troubleshooting to solve it easily. 1.- Verify 'python' and 'pip' locally \u00b6 1.1 Verify python: \u00b6 You can check if you have these already installed from the command line: python --version ... Python 2.7.16 1.2 Verify pip/pip3: \u00b6 Now, if you're familiar with Python, you can install Material and MkDocs with pip , the Python package manager. Make sure you have it installed in your computer using: pip --version or pip3 --version . 2.- Install Mkdocs \u00b6 Install the Mkdocs package using pip: pip3 install mkdocs Once is done, to check that everything worked fine run: mkdocs --version you will see something like: mkdocs, version 1.1 from /Library/Python/3.7/site-packages/mkdocs (Python 3.7) 3.- Install 'Material' theme for Mkdocs \u00b6 pip3 install mkdocs-material 4.- Install git plugin \u00b6 pip3 install mkdocs-git-revision-date-plugin This plugin will allow you to see the date of documentation updates. 5.- Clone the Github repo \u00b6 git clone git@github.ibm.com:wizeline/YOUR_REPO.git 6.- Test the site locally \u00b6 MkDocs comes included with a server. In order to run the site locally, inside your project use: mkdocs serve Then Open up http://127.0.0.1:8000/ in your browser, and you will see the default Home Page to verify all the time how looks everything before push your changes. Done! \u00b6","title":"Installation"},{"location":"Contribute-Doc/install-mkdocs/#overview","text":"MkDocs is a fast, simple and static site generator for building project documentation. Documentation source files are written in Markdown , and configured with a single YAML configuration file to add the structure and navigation menus. Example: mkdocs.yml file: # Paths and navigation. nav: - Home: index.md - Introduction: - 'Introduction': 'Introduction/intro-doc.md' - Documentation: - 'Docs': 'Documentation/doc-steps.md' ...","title":"Overview:"},{"location":"Contribute-Doc/install-mkdocs/#installation","text":"Important If you face any issue along this installation process then you can go here: Troubleshooting to solve it easily.","title":"Installation"},{"location":"Contribute-Doc/install-mkdocs/#1-verify-python-and-pip-locally","text":"","title":"1.- Verify 'python' and 'pip' locally"},{"location":"Contribute-Doc/install-mkdocs/#11-verify-python","text":"You can check if you have these already installed from the command line: python --version ... Python 2.7.16","title":"1.1 Verify python:"},{"location":"Contribute-Doc/install-mkdocs/#12-verify-pippip3","text":"Now, if you're familiar with Python, you can install Material and MkDocs with pip , the Python package manager. Make sure you have it installed in your computer using: pip --version or pip3 --version .","title":"1.2 Verify pip/pip3:"},{"location":"Contribute-Doc/install-mkdocs/#2-install-mkdocs","text":"Install the Mkdocs package using pip: pip3 install mkdocs Once is done, to check that everything worked fine run: mkdocs --version you will see something like: mkdocs, version 1.1 from /Library/Python/3.7/site-packages/mkdocs (Python 3.7)","title":"2.- Install Mkdocs"},{"location":"Contribute-Doc/install-mkdocs/#3-install-material-theme-for-mkdocs","text":"pip3 install mkdocs-material","title":"3.- Install 'Material' theme for Mkdocs"},{"location":"Contribute-Doc/install-mkdocs/#4-install-git-plugin","text":"pip3 install mkdocs-git-revision-date-plugin This plugin will allow you to see the date of documentation updates.","title":"4.- Install git plugin"},{"location":"Contribute-Doc/install-mkdocs/#5-clone-the-github-repo","text":"git clone git@github.ibm.com:wizeline/YOUR_REPO.git","title":"5.- Clone the Github repo"},{"location":"Contribute-Doc/install-mkdocs/#6-test-the-site-locally","text":"MkDocs comes included with a server. In order to run the site locally, inside your project use: mkdocs serve Then Open up http://127.0.0.1:8000/ in your browser, and you will see the default Home Page to verify all the time how looks everything before push your changes.","title":"6.- Test the site locally"},{"location":"Contribute-Doc/install-mkdocs/#done","text":"","title":"Done!"},{"location":"Contribute-Doc/mkdocs-refs/","text":"Url's: \u00b6 Mkdocs website Markdown website Customize Website Troubleshooting Installation","title":"References"},{"location":"Contribute-Doc/mkdocs-refs/#urls","text":"Mkdocs website Markdown website Customize Website Troubleshooting Installation","title":"Url's:"},{"location":"Front-End/front-improv/","text":"","title":"TODO: Improvements"},{"location":"Front-End/front-process/","text":"Front End con Cypress: \u00b6 Variables de ambiente \u2014 Guardar en(.env y cypress.json) los valores usados a lo largo del SQA. Tambi\u00e9n se puede tener un folder de config y centro varios files dependiendo el ambiente o un archivo cypress.env.json donde se definan las cosas Utilizar POM y BDD - hacer que la estrategia sea escalable y las funciones definidas o los elenentos sean reutilizables Definir un ESLint \u2014 en el proyecto con reglas y estructura Crear scripts --- En el package.json definir algunos scripts para poder correr los tests tambi\u00e9n en --headless CLI Eliminar los tests y data despu\u00e9s de correrse - Definir los before() and after() en cada archivo de .js para que los tests se mantengan independientes y sin data que estorbe Selecci\u00f3n de elementos --- Encontrar la estrategia de mejor selecci\u00f3n de elementos y comprobar si es mejor guardarlos por archivo de Page o tener algunas definciiones en archivos independientes y llamarlos desde ah\u00ed Comandos comunes y reutilizables --- Es conveniente definir algunos comandos en commands.js o crear un file de commonSteps donde se definan aquellos que se pueden reutilizar? Ocultar contrase\u00f1a - Hacer que los datos sensibles no sean visibles al correr el Test runner con log: false Screenshots: Hacer eficiente la forma en que se almacenan y tambi\u00e9n borrarlos una vez que el test termina Assertions --- Chai assertions de expect y should en los tests Reportes --- Lograr que se creen reportes cuando finalice el test y que se guarden en un folder Slack notification Jenkins, asignar que los tests corran por consola usando jenkins pipeline y definiendo todo en un Jenkinsfile Sonarqube --- Configurar sonarqube e integrarlo con el repo de github y adem\u00e1s en un stage del Jenkinsfile para checar las validaciones","title":"2.- Process"},{"location":"Front-End/front-process/#front-end-con-cypress","text":"Variables de ambiente \u2014 Guardar en(.env y cypress.json) los valores usados a lo largo del SQA. Tambi\u00e9n se puede tener un folder de config y centro varios files dependiendo el ambiente o un archivo cypress.env.json donde se definan las cosas Utilizar POM y BDD - hacer que la estrategia sea escalable y las funciones definidas o los elenentos sean reutilizables Definir un ESLint \u2014 en el proyecto con reglas y estructura Crear scripts --- En el package.json definir algunos scripts para poder correr los tests tambi\u00e9n en --headless CLI Eliminar los tests y data despu\u00e9s de correrse - Definir los before() and after() en cada archivo de .js para que los tests se mantengan independientes y sin data que estorbe Selecci\u00f3n de elementos --- Encontrar la estrategia de mejor selecci\u00f3n de elementos y comprobar si es mejor guardarlos por archivo de Page o tener algunas definciiones en archivos independientes y llamarlos desde ah\u00ed Comandos comunes y reutilizables --- Es conveniente definir algunos comandos en commands.js o crear un file de commonSteps donde se definan aquellos que se pueden reutilizar? Ocultar contrase\u00f1a - Hacer que los datos sensibles no sean visibles al correr el Test runner con log: false Screenshots: Hacer eficiente la forma en que se almacenan y tambi\u00e9n borrarlos una vez que el test termina Assertions --- Chai assertions de expect y should en los tests Reportes --- Lograr que se creen reportes cuando finalice el test y que se guarden en un folder Slack notification Jenkins, asignar que los tests corran por consola usando jenkins pipeline y definiendo todo en un Jenkinsfile Sonarqube --- Configurar sonarqube e integrarlo con el repo de github y adem\u00e1s en un stage del Jenkinsfile para checar las validaciones","title":"Front End con Cypress:"},{"location":"Front-End/front-reqs/","text":"Frontend project \u00b6 Initialize a new npm project and install all required dependencies. Navigate to Todoist and create an account, get familiar with the site since we are using it for the whole challenge. Implement your code using Page Object Model Fronted Automation Tasks: \u00b6 Successful login. Define a test case that performs a successful login, using credentials stored preferably in a .env file Unsuccessful login. Define multiple negative scenarios for login. Create a new task. Create a new task and validate it was created correctly Create 10 new tasks. Create 10 new tasks and validate they were created correctly. Task Names should be dynamic. Frontend Challenge Stage 2 will try to cover as much of the following: \u00b6 note Important Stage 2: Available only after completing all the previous work mentioned above. Tasks Create a New Task Type a due date Select Today as due date Select Tomorrow as due date Select Next Week as due date Select No Date Select a specific day in the calendar Add a specific hour to be completed Update Time Zone Select a specific project while creating a new task Set priority for a new Task Create N Number of Tasks Create N number of Sub Tasks Create Task Above Create Task Below Edit Task Drag and Drop Task Projects Create a New Project Select project color Add to Favorites (on/off) Enter to a Project Add a Section Create N number of Tasks inside a new section Sort Tasks by Name Sort Tasks by Priority Sort Tasks by Date Show Completed Tasks","title":"Requirements"},{"location":"Front-End/front-reqs/#frontend-project","text":"Initialize a new npm project and install all required dependencies. Navigate to Todoist and create an account, get familiar with the site since we are using it for the whole challenge. Implement your code using Page Object Model","title":"Frontend project"},{"location":"Front-End/front-reqs/#fronted-automation-tasks","text":"Successful login. Define a test case that performs a successful login, using credentials stored preferably in a .env file Unsuccessful login. Define multiple negative scenarios for login. Create a new task. Create a new task and validate it was created correctly Create 10 new tasks. Create 10 new tasks and validate they were created correctly. Task Names should be dynamic.","title":"Fronted Automation Tasks:"},{"location":"Front-End/front-reqs/#frontend-challenge-stage-2-will-try-to-cover-as-much-of-the-following","text":"note Important Stage 2: Available only after completing all the previous work mentioned above. Tasks Create a New Task Type a due date Select Today as due date Select Tomorrow as due date Select Next Week as due date Select No Date Select a specific day in the calendar Add a specific hour to be completed Update Time Zone Select a specific project while creating a new task Set priority for a new Task Create N Number of Tasks Create N number of Sub Tasks Create Task Above Create Task Below Edit Task Drag and Drop Task Projects Create a New Project Select project color Add to Favorites (on/off) Enter to a Project Add a Section Create N number of Tasks inside a new section Sort Tasks by Name Sort Tasks by Priority Sort Tasks by Date Show Completed Tasks","title":"Frontend Challenge Stage 2 will try to cover as much of the following:"},{"location":"Front-End/front-results/","text":"","title":"3.- Results"},{"location":"Front-End/front-tech-stack/","text":"","title":"1.- Teck Stack"},{"location":"Jenkins-Pipeline/back-script/","text":"Steps \u00b6 Prerequisites: Install plugin to generate reports using newman. npm install -g newman-reporter-htmlextra Create a script in package.json file \"backendTests\" : \"newman run ./src/backend/postman/todoist-backend.postman_collection.json -e ./src/backend/postman/todoist-backend.postman_environment.json -r htmlextra --reporter-htmlextra-export ./report_results/test_results_report.html\" run backend scripts: local: example npm run backendTests jenkinsfile stage('Backend') { steps { echo 'running backend tests...' sh 'npm run backendTests' } }","title":"Backend scripts"},{"location":"Jenkins-Pipeline/back-script/#steps","text":"Prerequisites: Install plugin to generate reports using newman. npm install -g newman-reporter-htmlextra Create a script in package.json file \"backendTests\" : \"newman run ./src/backend/postman/todoist-backend.postman_collection.json -e ./src/backend/postman/todoist-backend.postman_environment.json -r htmlextra --reporter-htmlextra-export ./report_results/test_results_report.html\" run backend scripts: local: example npm run backendTests jenkinsfile stage('Backend') { steps { echo 'running backend tests...' sh 'npm run backendTests' } }","title":"Steps"},{"location":"Jenkins-Pipeline/eslint/","text":"Optional installation plugins: npm install eslint - plugin - prettier @latest --save-dev npm install eslint-plugin-only-warn --save-de npm install eslint @4. x babel - eslint @8 -- save - dev Steps \u00b6 ESint doc Install: npm install eslint --save-dev Init configuration file: npm init @eslint / config Define the configuration and rules. example : \"rules\": { \"linebreak-style\": [ \"error\", \"unix\" ], \"quotes\": [ \"error\", \"single\" ], \"semi\": [ \"error\", \"never\" ] Create a script in package.json file \"lint\": \"eslint ./src\", run ESlint: local: example eslint ./ // eslint ./ -o ./test/eslint-report.html or npm run lint jenkinsfile \u00b6 stage ( 'Linting tools - Eslint' ) { steps { echo 'running Eslint..' sh 'npm run lint' } }","title":"ESlint"},{"location":"Jenkins-Pipeline/eslint/#steps","text":"ESint doc Install: npm install eslint --save-dev Init configuration file: npm init @eslint / config Define the configuration and rules. example : \"rules\": { \"linebreak-style\": [ \"error\", \"unix\" ], \"quotes\": [ \"error\", \"single\" ], \"semi\": [ \"error\", \"never\" ] Create a script in package.json file \"lint\": \"eslint ./src\", run ESlint: local: example eslint ./ // eslint ./ -o ./test/eslint-report.html or npm run lint","title":"Steps"},{"location":"Jenkins-Pipeline/eslint/#jenkinsfile","text":"stage ( 'Linting tools - Eslint' ) { steps { echo 'running Eslint..' sh 'npm run lint' } }","title":"jenkinsfile"},{"location":"Jenkins-Pipeline/front-script/","text":"","title":"Frontend scripts"},{"location":"Jenkins-Pipeline/perf-script/","text":"","title":"Performance scripts"},{"location":"Jenkins-Pipeline/slack-notif/","text":"Slack + Github \u00b6 Link Slack with github account following these images: Jenkins + Slack \u00b6 Create Slack channel to receive the notifications once a build in Jenkins finish. App > Jenkins > Add >. Configuration Jenkinsfile \u00b6 post { success { echo 'success!' slackSend color: \"#11cd4b\", channel: \"#sqa-challenge-fabianpg-notif\", message: \"*Build Passed*\\n Job: ${ env . JOB_NAME } \\n Build: ${ env . BUILD_NUMBER } \\n URL: ${ env . BUILD_URL } \" } failure { echo 'marked as failure' slackSend color: \"#F50407\", channel: \"#sqa-challenge-fabianpg-notif\", message: \"*Build Failed*\\n Job: ${ env . JOB_NAME } \\n Build: ${ env . BUILD_NUMBER } \\n URL: ${ env . BUILD_URL } \" } unstable { echo 'marked as unstable' slackSend color: \"#df6805\", channel: \"#sqa-challenge-fabianpg-notif\", message: \"*Build Unstable*\\n Job: ${ env . JOB_NAME } \\n Build: ${ env . BUILD_NUMBER } \\n URL: ${ env . BUILD_URL } \" } aborted { echo 'aborted' slackSend color: \"#f3f024\", channel: \"#sqa-challenge-fabianpg-notif\", message: \"*Build Aborted*\\n Job: ${ env . JOB_NAME } \\n Build: ${ env . BUILD_NUMBER } \\n URL: ${ env . BUILD_URL } \" } } results \u00b6","title":"Slack Notification"},{"location":"Jenkins-Pipeline/slack-notif/#slack-github","text":"Link Slack with github account following these images:","title":"Slack + Github"},{"location":"Jenkins-Pipeline/slack-notif/#jenkins-slack","text":"Create Slack channel to receive the notifications once a build in Jenkins finish. App > Jenkins > Add >. Configuration","title":"Jenkins + Slack"},{"location":"Jenkins-Pipeline/slack-notif/#jenkinsfile","text":"post { success { echo 'success!' slackSend color: \"#11cd4b\", channel: \"#sqa-challenge-fabianpg-notif\", message: \"*Build Passed*\\n Job: ${ env . JOB_NAME } \\n Build: ${ env . BUILD_NUMBER } \\n URL: ${ env . BUILD_URL } \" } failure { echo 'marked as failure' slackSend color: \"#F50407\", channel: \"#sqa-challenge-fabianpg-notif\", message: \"*Build Failed*\\n Job: ${ env . JOB_NAME } \\n Build: ${ env . BUILD_NUMBER } \\n URL: ${ env . BUILD_URL } \" } unstable { echo 'marked as unstable' slackSend color: \"#df6805\", channel: \"#sqa-challenge-fabianpg-notif\", message: \"*Build Unstable*\\n Job: ${ env . JOB_NAME } \\n Build: ${ env . BUILD_NUMBER } \\n URL: ${ env . BUILD_URL } \" } aborted { echo 'aborted' slackSend color: \"#f3f024\", channel: \"#sqa-challenge-fabianpg-notif\", message: \"*Build Aborted*\\n Job: ${ env . JOB_NAME } \\n Build: ${ env . BUILD_NUMBER } \\n URL: ${ env . BUILD_URL } \" } }","title":"Jenkinsfile"},{"location":"Jenkins-Pipeline/slack-notif/#results","text":"","title":"results"},{"location":"Jenkins-Pipeline/sonarqube/","text":"Sonarqube \u00b6 Installation : I followed this guide to install and start Sonarqube in localhost with port 9000 I created a SonarScanner tool in Jenkins as shown in this guide To configure Sonarqube with jenkins I followed those steps, except for the Jenkinsfile sh commands, for that I followed this except for configuring sonar-project.properties file because for that I based on internet stuff and official documentation of Sonarqube. Sonarqube configuration : \u00b6 Create project: Create project > manually > Write name Enable scan code with sonar without force user credentials: Administration > Security > Force user authentication (disable) Set permissions to the project: Administration > Project > Management > Quality Gates: Quality Gates > create > \"name\" 4.1 Add condition: You can create new conditions according of your needs and choose if you want to apply to \"On new code\" or \"overall code\". 4.2 Grant permissions to the previous user you created to link it to this Quality Gate. Quality Gates 5. You can choose if select as default the new Quality Gate you created or select the one with name \"Sonar Way\" with the default metrics already has. Jenkins configuration \u00b6 Plugin: Verify if Sonarqube plugin is already installed. SQ server: Manage > Configuration > SonarQube servers > add SQ scanner: Manage > Global Tool Configuration > SonarQube Scanner > add Jenkinsfile \u00b6 This is how it looks the stages for Sonarqube: stage ( 'Static Analysis - Sonarqube' ) { environment { SCANNER_HOME = tool 'SonarQubeScanner' PROJECT_NAME = 'SQA-Challenge' } steps { echo 'running Sonarqube..' echo \"${SCANNER_HOME}\" withSonarQubeEnv ( 'SonarQube' ) { sh ''' ${SCANNER_HOME}/bin/sonar-scanner \\ -Dsonar.projectKey=\"${PROJECT_NAME}\" ''' } } } stage ( 'Quality Gate - Sonarqube' ) { steps { echo 'waiting for QualityGate Sonarqube..' waitForQualityGate abortPipeline : true } } Results \u00b6","title":"Sonarqube"},{"location":"Jenkins-Pipeline/sonarqube/#sonarqube","text":"Installation : I followed this guide to install and start Sonarqube in localhost with port 9000 I created a SonarScanner tool in Jenkins as shown in this guide To configure Sonarqube with jenkins I followed those steps, except for the Jenkinsfile sh commands, for that I followed this except for configuring sonar-project.properties file because for that I based on internet stuff and official documentation of Sonarqube.","title":"Sonarqube"},{"location":"Jenkins-Pipeline/sonarqube/#sonarqube-configuration","text":"Create project: Create project > manually > Write name Enable scan code with sonar without force user credentials: Administration > Security > Force user authentication (disable) Set permissions to the project: Administration > Project > Management > Quality Gates: Quality Gates > create > \"name\" 4.1 Add condition: You can create new conditions according of your needs and choose if you want to apply to \"On new code\" or \"overall code\". 4.2 Grant permissions to the previous user you created to link it to this Quality Gate. Quality Gates 5. You can choose if select as default the new Quality Gate you created or select the one with name \"Sonar Way\" with the default metrics already has.","title":"Sonarqube configuration:"},{"location":"Jenkins-Pipeline/sonarqube/#jenkins-configuration","text":"Plugin: Verify if Sonarqube plugin is already installed. SQ server: Manage > Configuration > SonarQube servers > add SQ scanner: Manage > Global Tool Configuration > SonarQube Scanner > add","title":"Jenkins configuration"},{"location":"Jenkins-Pipeline/sonarqube/#jenkinsfile","text":"This is how it looks the stages for Sonarqube: stage ( 'Static Analysis - Sonarqube' ) { environment { SCANNER_HOME = tool 'SonarQubeScanner' PROJECT_NAME = 'SQA-Challenge' } steps { echo 'running Sonarqube..' echo \"${SCANNER_HOME}\" withSonarQubeEnv ( 'SonarQube' ) { sh ''' ${SCANNER_HOME}/bin/sonar-scanner \\ -Dsonar.projectKey=\"${PROJECT_NAME}\" ''' } } } stage ( 'Quality Gate - Sonarqube' ) { steps { echo 'waiting for QualityGate Sonarqube..' waitForQualityGate abortPipeline : true } }","title":"Jenkinsfile"},{"location":"Jenkins-Pipeline/sonarqube/#results","text":"","title":"Results"},{"location":"Performance/perf-improv/","text":"","title":"TODO: Improvements"},{"location":"Performance/perf-process/","text":"","title":"2.- Process"},{"location":"Performance/perf-reqs/","text":"Performance project \u00b6 Performance Testing Stage will try to cover as much of the following: \u00b6 Setup a Performance Testing Tool that work along with your project i.e. Artillery K6 Over the API Requests configured in Postman Collection (Headers, Payload, Authorization Token) Define a load phase that last at least 60 seconds with 50 new users per second Gather the metrics such as Min Latency Time Max Latency Time Error rate Success rate Repeat the step 2 but now with 75 new users per second (Arrival Rate) and compare the metrics of two results. Important Available only after completing all the previous work mentioned above (Specially Backend Stage). Note Optional (You can connect to the DataDog API for check the graphcis of the tests metrics to monitor the behavior.)","title":"Requirements"},{"location":"Performance/perf-reqs/#performance-project","text":"","title":"Performance project"},{"location":"Performance/perf-reqs/#performance-testing-stage-will-try-to-cover-as-much-of-the-following","text":"Setup a Performance Testing Tool that work along with your project i.e. Artillery K6 Over the API Requests configured in Postman Collection (Headers, Payload, Authorization Token) Define a load phase that last at least 60 seconds with 50 new users per second Gather the metrics such as Min Latency Time Max Latency Time Error rate Success rate Repeat the step 2 but now with 75 new users per second (Arrival Rate) and compare the metrics of two results. Important Available only after completing all the previous work mentioned above (Specially Backend Stage). Note Optional (You can connect to the DataDog API for check the graphcis of the tests metrics to monitor the behavior.)","title":"Performance Testing Stage will try to cover as much of the following:"},{"location":"Performance/perf-results/","text":"","title":"3.- Results"},{"location":"Performance/perf-tech-stack/","text":"","title":"1.- Teck Stack"},{"location":"References/refs/","text":"Backend \u00b6 running postman collections - newman CLI npm htmlextra reports Frontend \u00b6 Performance \u00b6 Load testing K6-Postman npm package postman-to-k6","title":"References"},{"location":"References/refs/#backend","text":"running postman collections - newman CLI npm htmlextra reports","title":"Backend"},{"location":"References/refs/#frontend","text":"","title":"Frontend"},{"location":"References/refs/#performance","text":"Load testing K6-Postman npm package postman-to-k6","title":"Performance"}]}