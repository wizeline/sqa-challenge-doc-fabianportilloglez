{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 This is the documentation made by Fabian Portillo Gonzalez (@fabianpg95 github username) on the proposed SQA challenge in order to gain experience in the technical and soft skills along the process of this challenge. This site was made using Mkdocs as static site and markdown as a written language with the purpose of having the different sections documented in a more understandable and isolated way such as the definition of objectives of the challenge, the Back End , Front End , and Performance sections besides a technical diagram showing the different components as part of the application. Goals SQA Challenge \u00b6 Implement Page Object Model with one of the Javascript based frameworks listed for Frontend Automation. Document everything, add readme describing the steps and how to's on each section. Use best practices for element selectors. Use Eslint for static analysis and assure code standards. Configure SonarQube . Implement Backend Automation. Configure any of the described CI tools mentioned below to build on demand. Set up Slack notifications once a new build is done. Implement BrowserStack for cross platform/browser testing.(Ask your buddy for BS credentials or contact eduardo.contreras) Create a Slides presentation describing your project, integration of tools, adventages, disadvantages, structure and also include a diagram flow.","title":"Index"},{"location":"#introduction","text":"This is the documentation made by Fabian Portillo Gonzalez (@fabianpg95 github username) on the proposed SQA challenge in order to gain experience in the technical and soft skills along the process of this challenge. This site was made using Mkdocs as static site and markdown as a written language with the purpose of having the different sections documented in a more understandable and isolated way such as the definition of objectives of the challenge, the Back End , Front End , and Performance sections besides a technical diagram showing the different components as part of the application.","title":"Introduction"},{"location":"#goals-sqa-challenge","text":"Implement Page Object Model with one of the Javascript based frameworks listed for Frontend Automation. Document everything, add readme describing the steps and how to's on each section. Use best practices for element selectors. Use Eslint for static analysis and assure code standards. Configure SonarQube . Implement Backend Automation. Configure any of the described CI tools mentioned below to build on demand. Set up Slack notifications once a new build is done. Implement BrowserStack for cross platform/browser testing.(Ask your buddy for BS credentials or contact eduardo.contreras) Create a Slides presentation describing your project, integration of tools, adventages, disadvantages, structure and also include a diagram flow.","title":"Goals SQA Challenge"},{"location":"Back-End/back-process/","text":"Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"Process"},{"location":"Back-End/back-reqs/","text":"Backend project \u00b6 Navigate to Todoist API Download Postman Define a new collection and a new environment for your variables Backend Automation Tasks: \u00b6 Get your authorization token and save it as an environment variable Create a new folder inside your collection for projects and another one for tasks. Create the following endpoints and its corresponding Tests: status codes, content, json schema,response time, etc. a) Projects Get all projects Create a new project Get a project Update a project Delete a project b) Tasks: Get active tasks Create a new task Get an active task Update a task Close a task Reopen a task Delete a task Create Negative scenarios for each endpoint Info Integrate one framework for API Test Automation i.e. Newman Axios SuperTest chai-http So you can run your tests from the command line","title":"Requirements"},{"location":"Back-End/back-reqs/#backend-project","text":"Navigate to Todoist API Download Postman Define a new collection and a new environment for your variables","title":"Backend project"},{"location":"Back-End/back-reqs/#backend-automation-tasks","text":"Get your authorization token and save it as an environment variable Create a new folder inside your collection for projects and another one for tasks. Create the following endpoints and its corresponding Tests: status codes, content, json schema,response time, etc. a) Projects Get all projects Create a new project Get a project Update a project Delete a project b) Tasks: Get active tasks Create a new task Get an active task Update a task Close a task Reopen a task Delete a task Create Negative scenarios for each endpoint Info Integrate one framework for API Test Automation i.e. Newman Axios SuperTest chai-http So you can run your tests from the command line","title":"Backend Automation Tasks:"},{"location":"Contribute-Doc/contribute-doc/","text":"Contribute with documentation: \u00b6 In the following link you will see all changes done for documentation of this sqa-challenge-fabianportilloglez : Github repository \u00b6 Prerequisites: \u00b6 Test the site locally: \u00b6 Remember that MkDocs comes included with a server. In order to run the site locally, inside your project use: mkdocs serve Then Open up http://127.0.0.1:8000/ in your browser, and you will see the default Home Page to see all the time how looks everything before push your changes. Work with branches: \u00b6 Important Please always do git pull before working on your code and before committing any changes in order to avoid conflicts in our versions. Steps \u00b6 1.- Build the site \u00b6 mkdocs build 2.- Commit the changes \u00b6 Once you did changes commit them using: git commit -m \"Write your commit message\" 3.- Push your changes \u00b6 git push origin main 4.- Deploy the changes to Github Pages \u00b6 mkdocs gh-deploy Done! \u00b6","title":"Contribute"},{"location":"Contribute-Doc/contribute-doc/#contribute-with-documentation","text":"In the following link you will see all changes done for documentation of this sqa-challenge-fabianportilloglez :","title":"Contribute with documentation:"},{"location":"Contribute-Doc/contribute-doc/#github-repository","text":"","title":"Github repository"},{"location":"Contribute-Doc/contribute-doc/#prerequisites","text":"","title":"Prerequisites:"},{"location":"Contribute-Doc/contribute-doc/#test-the-site-locally","text":"Remember that MkDocs comes included with a server. In order to run the site locally, inside your project use: mkdocs serve Then Open up http://127.0.0.1:8000/ in your browser, and you will see the default Home Page to see all the time how looks everything before push your changes.","title":"Test the site locally:"},{"location":"Contribute-Doc/contribute-doc/#work-with-branches","text":"Important Please always do git pull before working on your code and before committing any changes in order to avoid conflicts in our versions.","title":"Work with branches:"},{"location":"Contribute-Doc/contribute-doc/#steps","text":"","title":"Steps"},{"location":"Contribute-Doc/contribute-doc/#1-build-the-site","text":"mkdocs build","title":"1.- Build the site"},{"location":"Contribute-Doc/contribute-doc/#2-commit-the-changes","text":"Once you did changes commit them using: git commit -m \"Write your commit message\"","title":"2.- Commit the changes"},{"location":"Contribute-Doc/contribute-doc/#3-push-your-changes","text":"git push origin main","title":"3.- Push your changes"},{"location":"Contribute-Doc/contribute-doc/#4-deploy-the-changes-to-github-pages","text":"mkdocs gh-deploy","title":"4.- Deploy the changes to Github Pages"},{"location":"Contribute-Doc/contribute-doc/#done","text":"","title":"Done!"},{"location":"Contribute-Doc/install-mkdocs/","text":"Overview: \u00b6 MkDocs is a fast, simple and static site generator for building project documentation. Documentation source files are written in Markdown , and configured with a single YAML configuration file to add the structure and navigation menus. Example: mkdocs.yml file: # Paths and navigation. nav: - Home: index.md - Introduction: - 'Introduction': 'Introduction/intro-doc.md' - Documentation: - 'Docs': 'Documentation/doc-steps.md' ... Installation \u00b6 Important If you face any issue along this installation process then you can go here: Troubleshooting to solve it easily. 1.- Verify 'python' and 'pip' locally \u00b6 1.1 Verify python: \u00b6 You can check if you have these already installed from the command line: python --version ... Python 2.7.16 1.2 Verify pip/pip3: \u00b6 Now, if you're familiar with Python, you can install Material and MkDocs with pip , the Python package manager. Make sure you have it installed in your computer using: pip --version or pip3 --version . 2.- Install Mkdocs \u00b6 Install the Mkdocs package using pip: pip3 install mkdocs Once is done, to check that everything worked fine run: mkdocs --version you will see something like: mkdocs, version 1.1 from /Library/Python/3.7/site-packages/mkdocs (Python 3.7) 3.- Install 'Material' theme for Mkdocs \u00b6 pip3 install mkdocs-material 4.- Install git plugin \u00b6 pip3 install mkdocs-git-revision-date-plugin This plugin will allow you to see the date of documentation updates. 5.- Clone the Github repo \u00b6 git clone git@github.ibm.com:wizeline/YOUR_REPO.git 6.- Test the site locally \u00b6 MkDocs comes included with a server. In order to run the site locally, inside your project use: mkdocs serve Then Open up http://127.0.0.1:8000/ in your browser, and you will see the default Home Page to verify all the time how looks everything before push your changes. Done! \u00b6","title":"Installation"},{"location":"Contribute-Doc/install-mkdocs/#overview","text":"MkDocs is a fast, simple and static site generator for building project documentation. Documentation source files are written in Markdown , and configured with a single YAML configuration file to add the structure and navigation menus. Example: mkdocs.yml file: # Paths and navigation. nav: - Home: index.md - Introduction: - 'Introduction': 'Introduction/intro-doc.md' - Documentation: - 'Docs': 'Documentation/doc-steps.md' ...","title":"Overview:"},{"location":"Contribute-Doc/install-mkdocs/#installation","text":"Important If you face any issue along this installation process then you can go here: Troubleshooting to solve it easily.","title":"Installation"},{"location":"Contribute-Doc/install-mkdocs/#1-verify-python-and-pip-locally","text":"","title":"1.- Verify 'python' and 'pip' locally"},{"location":"Contribute-Doc/install-mkdocs/#11-verify-python","text":"You can check if you have these already installed from the command line: python --version ... Python 2.7.16","title":"1.1 Verify python:"},{"location":"Contribute-Doc/install-mkdocs/#12-verify-pippip3","text":"Now, if you're familiar with Python, you can install Material and MkDocs with pip , the Python package manager. Make sure you have it installed in your computer using: pip --version or pip3 --version .","title":"1.2 Verify pip/pip3:"},{"location":"Contribute-Doc/install-mkdocs/#2-install-mkdocs","text":"Install the Mkdocs package using pip: pip3 install mkdocs Once is done, to check that everything worked fine run: mkdocs --version you will see something like: mkdocs, version 1.1 from /Library/Python/3.7/site-packages/mkdocs (Python 3.7)","title":"2.- Install Mkdocs"},{"location":"Contribute-Doc/install-mkdocs/#3-install-material-theme-for-mkdocs","text":"pip3 install mkdocs-material","title":"3.- Install 'Material' theme for Mkdocs"},{"location":"Contribute-Doc/install-mkdocs/#4-install-git-plugin","text":"pip3 install mkdocs-git-revision-date-plugin This plugin will allow you to see the date of documentation updates.","title":"4.- Install git plugin"},{"location":"Contribute-Doc/install-mkdocs/#5-clone-the-github-repo","text":"git clone git@github.ibm.com:wizeline/YOUR_REPO.git","title":"5.- Clone the Github repo"},{"location":"Contribute-Doc/install-mkdocs/#6-test-the-site-locally","text":"MkDocs comes included with a server. In order to run the site locally, inside your project use: mkdocs serve Then Open up http://127.0.0.1:8000/ in your browser, and you will see the default Home Page to verify all the time how looks everything before push your changes.","title":"6.- Test the site locally"},{"location":"Contribute-Doc/install-mkdocs/#done","text":"","title":"Done!"},{"location":"Contribute-Doc/mkdocs-refs/","text":"Url's: \u00b6 Mkdocs website Markdown website Customize Website Troubleshooting Installation","title":"References"},{"location":"Contribute-Doc/mkdocs-refs/#urls","text":"Mkdocs website Markdown website Customize Website Troubleshooting Installation","title":"Url's:"},{"location":"Front-End/front-process/","text":"","title":"Process"},{"location":"Front-End/front-reqs/","text":"Frontend project \u00b6 Initialize a new npm project and install all required dependencies. Navigate to Todoist and create an account, get familiar with the site since we are using it for the whole challenge. Implement your code using Page Object Model Fronted Automation Tasks: \u00b6 Successful login. Define a test case that performs a successful login, using credentials stored preferably in a .env file Unsuccessful login. Define multiple negative scenarios for login. Create a new task. Create a new task and validate it was created correctly Create 10 new tasks. Create 10 new tasks and validate they were created correctly. Task Names should be dynamic. Frontend Challenge Stage 2 will try to cover as much of the following: \u00b6 note Important Stage 2: Available only after completing all the previous work mentioned above. Tasks Create a New Task Type a due date Select Today as due date Select Tomorrow as due date Select Next Week as due date Select No Date Select a specific day in the calendar Add a specific hour to be completed Update Time Zone Select a specific project while creating a new task Set priority for a new Task Create N Number of Tasks Create N number of Sub Tasks Create Task Above Create Task Below Edit Task Drag and Drop Task Projects Create a New Project Select project color Add to Favorites (on/off) Enter to a Project Add a Section Create N number of Tasks inside a new section Sort Tasks by Name Sort Tasks by Priority Sort Tasks by Date Show Completed Tasks","title":"Requirements"},{"location":"Front-End/front-reqs/#frontend-project","text":"Initialize a new npm project and install all required dependencies. Navigate to Todoist and create an account, get familiar with the site since we are using it for the whole challenge. Implement your code using Page Object Model","title":"Frontend project"},{"location":"Front-End/front-reqs/#fronted-automation-tasks","text":"Successful login. Define a test case that performs a successful login, using credentials stored preferably in a .env file Unsuccessful login. Define multiple negative scenarios for login. Create a new task. Create a new task and validate it was created correctly Create 10 new tasks. Create 10 new tasks and validate they were created correctly. Task Names should be dynamic.","title":"Fronted Automation Tasks:"},{"location":"Front-End/front-reqs/#frontend-challenge-stage-2-will-try-to-cover-as-much-of-the-following","text":"note Important Stage 2: Available only after completing all the previous work mentioned above. Tasks Create a New Task Type a due date Select Today as due date Select Tomorrow as due date Select Next Week as due date Select No Date Select a specific day in the calendar Add a specific hour to be completed Update Time Zone Select a specific project while creating a new task Set priority for a new Task Create N Number of Tasks Create N number of Sub Tasks Create Task Above Create Task Below Edit Task Drag and Drop Task Projects Create a New Project Select project color Add to Favorites (on/off) Enter to a Project Add a Section Create N number of Tasks inside a new section Sort Tasks by Name Sort Tasks by Priority Sort Tasks by Date Show Completed Tasks","title":"Frontend Challenge Stage 2 will try to cover as much of the following:"},{"location":"Performance/perf-process/","text":"","title":"Process"},{"location":"Performance/perf-reqs/","text":"Performance project \u00b6 Performance Testing Stage will try to cover as much of the following: \u00b6 Setup a Performance Testing Tool that work along with your project i.e. Artillery K6 Over the API Requests configured in Postman Collection (Headers, Payload, Authorization Token) Define a load phase that last at least 60 seconds with 50 new users per second Gather the metrics such as Min Latency Time Max Latency Time Error rate Success rate Repeat the step 2 but now with 75 new users per second (Arrival Rate) and compare the metrics of two results. Important Available only after completing all the previous work mentioned above (Specially Backend Stage). Note Optional (You can connect to the DataDog API for check the graphcis of the tests metrics to monitor the behavior.)","title":"Requirements"},{"location":"Performance/perf-reqs/#performance-project","text":"","title":"Performance project"},{"location":"Performance/perf-reqs/#performance-testing-stage-will-try-to-cover-as-much-of-the-following","text":"Setup a Performance Testing Tool that work along with your project i.e. Artillery K6 Over the API Requests configured in Postman Collection (Headers, Payload, Authorization Token) Define a load phase that last at least 60 seconds with 50 new users per second Gather the metrics such as Min Latency Time Max Latency Time Error rate Success rate Repeat the step 2 but now with 75 new users per second (Arrival Rate) and compare the metrics of two results. Important Available only after completing all the previous work mentioned above (Specially Backend Stage). Note Optional (You can connect to the DataDog API for check the graphcis of the tests metrics to monitor the behavior.)","title":"Performance Testing Stage will try to cover as much of the following:"},{"location":"SQA-Diagram/sqa-diagram/","text":"","title":"Diagram"}]}